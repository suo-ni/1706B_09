#### 创建组件的方法
 - 函数式组件
 - 类组件 继承React.Component
 - Hooks组件，就是hooks+函数是组件
#### 生命周期
 - constructor
 - componentWillMount
 - componentDidMount
 - render

 - componentWillReceiveProps
 - shouldComponentUpdate
 - componentWillUpdate
 - componentDidUpdate

 - componentWillUnmount

 ##### 新增的两个生命周期
  - getSnapshotBeforeUpdate
  - getDerivedStateFromProps

### 事件绑定
 - 合成事件
 - 事件绑定this
    
    - 比较优先的事件绑定方式

        - 在constructor里bind
        - 对象字面量函数
     - 有两种方法会导致不必要的重新渲染分别是：
         
         - 在render里bind
         - 箭头函数
   
## 跨域
#### 跨域本质 
 - 同源策略的限制
 - 请求正常的发出和返回，受到了浏览器的限制
#### 解决跨域
 - Proxy 前端上线是构建静态资源，使用专业web服务器（nginx，apache，tomcat等）而不是webpack起服务，所有Proxy只能用于开发环境使用，线上使用不了，线上一定要使用代理的话交给服务端去处理。
 - CORS(cross origin resource sharing) 几个关键的头部字段
    - Access-Control-Allow-Origin: *
    - Access-Control-Allow-Headers: 'x-nideshop-token'
    - Access-Control-Allow-Methods: 'GET,POST,HEADERS,OPTIONS,PUT,DELERE'
 - JSONP
    - 原理：通过请求js，返回函数调用的方式绕过同源策略
    - 限制：只能用于get请求，访问一些安全性要求不高的资源

```
 var src = 'https://www.baidu.com/sugrec?pre=1&p=3&ie=utf-8&json=1&prod=pc&from=pc_web&wd=jsonp&req=2&bs=json&pbs=jsonp&csor=5&pwd=jso&cb=jQuery110203466153306303521_1585281282549&_=1585281282560';
var script = document.createElement('script');
script.src = src;
window.jQuery110203466153306303521_1585281282549 = function(res){
    console.log('res...', res);
}
```